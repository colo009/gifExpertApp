{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","id","type","value","onChange","target","GetGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setcategories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SARW,SAAAC,GACjBA,EAAEC,iBACFN,GAAe,SAAAO,GAEX,OADAJ,EAAc,IACR,CAAGD,GAAT,mBAAwBK,QAI5B,SACI,uBACIC,GAAG,SACHC,KAAK,OACLC,MAAQR,EACRS,SAjBc,SAAAN,GACtBF,EAAcE,EAAEO,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAQ,CACJhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAaZM,GAbY,4CAAH,sDCEPM,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACjC,OACI,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAMA,EAAN,WCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAE1B,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNvB,EAASC,GACRuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGlB,CAAEnB,IAEEoB,EDd2BK,CAAczB,GAAlCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OACI,qCACA,mCAAMnB,EAAN,OACEmB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOH,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADAA,EAAIhB,aEZhBgC,EAAe,WAExB,MAAoCvC,mBAAS,CAAC,oBAA9C,mBAAOwC,EAAP,KAAmBC,EAAnB,KAQA,OACI,qCACI,gDACA,cAAC,EAAD,CAAa1C,cAAe0C,IAC5B,uBACA,6BAEQD,EAAWlB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MClB9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5d397fe6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = e => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        setCategories( cats => {\r\n            setinputValue('')\r\n            return [ inputValue, ...cats ]} )\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                id=\"inputx\"\r\n                type=\"text\" \r\n                value={ inputValue } \r\n                onChange={ handleInputChange } />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const GetGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Yc9OpKEndahKgOSrwYakFm2UeW7bz3U0`\r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return ({\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        })\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n          <img src={ url } alt={ title } />\r\n          <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category )\r\n\r\n    return (\r\n        <>\r\n        <h3> {category} </h3>\r\n        { loading && <p>Loading...</p> }\r\n        <div className=\"card-grid\" >\r\n            {\r\n                images.map( img => (\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    { ...img }\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { GetGifs } from '../helpers/GetGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        GetGifs( category )\r\n        .then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        } )\r\n    }, [ category ])\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setcategories] = useState(['Hunter x Hunter'])\r\n\r\n    // const handleAdd = anime => {\r\n    //     anime = 'Dragon Ball'\r\n    //     // setcategories([anime, ...categories])\r\n    //     setcategories( cats => [...cats, anime])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <AddCategory setCategories={setcategories} />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid \r\n                        key={ category }\r\n                        category={ category } />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}